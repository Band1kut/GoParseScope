package main

import (
	"bufio"
	"context"
	"fmt"
	"github.com/tidwall/gjson"
	"io"
	"net/http"
	"net/url"
	"os"
	"sync"
	"time"
)

var t string
var usedIP = make(map[string]bool)

func main() {
	proba()
	//	c := make(chan *http.Client)
	//
	//	for i := 0; i < 10; i++ {
	//		go func() {
	//			prx := stats.Proxy()
	//			c <- getClient(prx)
	//		}()
	//	}
	//	time.Sleep(2 * time.Second)
	//	println(len(c))
	//loop:
	//	for {
	//		select {
	//		case cl, ok := <-c:
	//			if !ok {
	//				break loop
	//			}
	//			for i := 0; i < 10; i++ {
	//				ip := proxyIP(cl)
	//				fmt.Println(ip, t)
	//			}
	//		}
	//	}
	//
	//	time.Sleep(60 * time.Second)
	//	close(c)

	//prx := "http://6063410-all-country-DE:1fh0bpgvy8@194.88.106.169:13658"
	//cl := getClient(prx)
	//fmt.Println(proxyIP(cl), t)
	//fmt.Println(proxyIP(cl), t)
	////fmt.Println(changeIP("6063410"))
	//cl = getClient(prx)
	//fmt.Println(proxyIP(cl), t)
	//fmt.Println(proxyIP(cl), t)
	//fmt.Println(proxyIP(cl), t)
	//fmt.Println(proxyIP(cl), t)
	////fmt.Println(changeIP("6063410"))
	//cl = getClient(prx)
	//fmt.Println(proxyIP(cl), t)
	//fmt.Println(proxyIP(cl), t)

	//prx := "http://46acd86e65:33000997_country-fr@185.156.177.59:8377"
	//fmt.Println(getIP(prx), t)
	//fmt.Println(getIP(prx), t)
	////fmt.Println(changeIP("6063001"))
	//fmt.Println(getIP(prx), t)
	//fmt.Println(getIP(prx), t)

	//num := 10
	//c := make(chan *http.Client)
	//addProxies(c, num)
	//
	//for len(c) < num {
	//	time.Sleep(time.Second)
	//	fmt.Println(t, usedIP)
	//}
	//
	//fmt.Println(t, usedIP)
	//close(c)

	//ps, _ := readLines("proxies.txt")
	//for _, px := range ps {
	//	px = "http://" + px
	//	fmt.Println(px)
	//	for i := 0; i < 10; i++ {
	//		time.Sleep(200 * time.Millisecond)
	//		fmt.Println(getIP(px), t)
	//	}
	//}

	//cl := getClient()
	//cl2 := getClient()
	//cl3 := getClient()
	//cl4 := getClient()
	//for i := 0; i < 5; i++ {
	//	time.Sleep(200 * time.Millisecond)
	//	fmt.Println(proxyIP(cl), t)
	//}
	//
	//for i := 0; i < 5; i++ {
	//	time.Sleep(200 * time.Millisecond)
	//	fmt.Println(proxyIP(cl2), t)
	//}
	//for i := 0; i < 5; i++ {
	//	time.Sleep(200 * time.Millisecond)
	//	fmt.Println(proxyIP(cl3), t)
	//}
	//
	//for i := 0; i < 5; i++ {
	//	time.Sleep(200 * time.Millisecond)
	//	fmt.Println(proxyIP(cl4), t)
	//}

	//defer timeTrack(time.Now(), "main")
	//var l []*proxy
	//for i := 0; i < 5; i++ {
	//	fmt.Println(i)
	//	l = append(l, newClient())
	//}
	//
	//for _, p := range l {
	//	fmt.Println(p.ip)
	//}
	//fmt.Println(t)
}

func proba() {
	wg := &sync.WaitGroup{}
	pl, _ := readLines("proxies.txt")
	ch := proxyChan(pl, wg)
	defer close(ch)
	wg.Wait()
	for {
		select {
		case prx, ok := <-ch:
			time.Sleep(10 * time.Second)
			if ok {
				fmt.Println(gIP(prx.client))
			} else {
				fmt.Println("Канал закрыт!")
				return
			}
		default:
			fmt.Println("Канал пуст!")
			return
		}
	}
}

func gIP(cl *http.Client) string {
	st := time.Now()
	//tmpUrl := "https://api.ipify.org?format=json"
	tmpUrl := "https://api.2ip.ua/geo.json?ip="

	req, err := http.NewRequest("GET", tmpUrl, nil)
	if err != nil {
		fmt.Println(err)
		return ""
	}
	req.Header.Set("Accept", "application/json, text/javascript, */*; q=0.01")
	//req.Header.Add("User-Agent", )
	response, err := cl.Do(req)
	if err != nil {
		fmt.Println(err)
		return ""
	}
	defer response.Body.Close()

	body, _ := io.ReadAll(response.Body)
	resp := gjson.ParseBytes(body)
	timeTrack(st, "proxyIP")
	return resp.Get("ip").String() + " " + resp.Get("country_rus").String()

}

func timeTrack(start time.Time, name string) {
	_ = name
	fmt.Printf("%s заняло %s\n", name, time.Since(start))
	t = time.Since(start).String()
}

func getIP(prx string) string {
	defer timeTrack(time.Now(), "main")
	//tmpUrl := "https://api.ipify.org?format=json"
	tmpUrl := "https://api.2ip.ua/geo.json?ip="

	proxyUrl, _ := url.Parse(prx)

	httpClient := &http.Client{
		Timeout: 15 * time.Second,
		Transport: &http.Transport{
			Proxy: http.ProxyURL(proxyUrl),
		},
	}

	req, err := http.NewRequest("GET", tmpUrl, nil)
	if err != nil {
		fmt.Println(err)
		return ""
	}
	req.Header.Set("Accept", "application/json, text/javascript, */*; q=0.01")
	//req.Header.Add("User-Agent", )

	response, err := httpClient.Do(req)
	if err != nil {
		fmt.Println(err)
		return ""
	}
	defer response.Body.Close()

	body, _ := io.ReadAll(response.Body)
	resp := gjson.ParseBytes(body)

	return resp.Get("ip").String() + " " + resp.Get("country_rus").String()

}

func changeIP(portID string) string {
	defer timeTrack(time.Now(), "main")
	tmpUrl := fmt.Sprintf("https://api.asocks.com/v2/proxy/refresh/%s?apikey=LwbKDPWMEh2r4Uu62azOtidvwBwfmA2W", portID)

	httpClient := &http.Client{
		Timeout: 15 * time.Second}

	req, err := http.NewRequest("GET", tmpUrl, nil)
	if err != nil {
		fmt.Println(err)
		return ""
	}
	req.Header.Set("Accept", "application/json, text/javascript, */*; q=0.01")
	//req.Header.Add("User-Agent", )

	response, err := httpClient.Do(req)
	if err != nil {
		fmt.Println(err)
		return ""
	}
	defer response.Body.Close()

	body, _ := io.ReadAll(response.Body)
	resp := gjson.ParseBytes(body)

	return resp.Get("success").String()

}

func readLines(path string) ([]string, error) {
	file, err := os.Open(path)
	if err != nil {
		return nil, err
	}
	defer file.Close()

	var lines []string
	scanner := bufio.NewScanner(file)
	for scanner.Scan() {
		lines = append(lines, "http://"+scanner.Text())
	}
	return lines, scanner.Err()
}

func getClient(prx string) *http.Client {
	fmt.Println("getClient", prx)
	proxyUrl, _ := url.Parse(prx)
	httpClient := &http.Client{
		Timeout: 10 * time.Second,
		Transport: &http.Transport{
			Proxy: http.ProxyURL(proxyUrl),
		},
	}
	return httpClient
}

func proxyIP(ctx context.Context, cl *http.Client) string {
	st := time.Now()
	tmpUrl := "https://api.ipify.org?format=json"
	//tmpUrl := "https://api.2ip.ua/geo.json?ip="

	req, err := http.NewRequestWithContext(ctx, "GET", tmpUrl, nil)
	if err != nil {
		fmt.Println(err)
		return ""
	}
	req.Header.Set("Accept", "application/json, text/javascript, */*; q=0.01")
	//req.Header.Add("User-Agent", )
	response, err := cl.Do(req)
	if err != nil {
		fmt.Println(err)
		return ""
	}
	defer response.Body.Close()

	body, _ := io.ReadAll(response.Body)
	resp := gjson.ParseBytes(body)
	timeTrack(st, "proxyIP")
	return resp.Get("ip").String() // + " " + resp.Get("country_rus").String()

}

type proxy struct {
	name      string
	url       string
	client    *http.Client
	ip        string
	remaining int
}

//var countries = []string{"Эстония", "Латвия", "Литва", "Швеция", "Норвегия", "Турция", "Польша", "Словакия", "Венгрия", "Чехия", "Германия", "Бельгия", "Нидерланды", "Швеция", "Италия", "Франция", "Испания", "Грузия", "Армения", "Словения", "Хорватия", "Греция"}

func proxyChan(pl []string, wg *sync.WaitGroup) chan *proxy {
	prxChan := make(chan *proxy, 100)
	for _, pxUrl := range pl {
		//pxUrl := pxUrl
		wg.Add(1)
		go func(pxUrl string) {
			defer wg.Done()
			prx := &proxy{
				//name:      name,
				url:       pxUrl,
				remaining: 3,
			}
			prx.ClientAndIP(prxChan)

		}(pxUrl) //, countries[i])
	}
	return prxChan
}

func (prx *proxy) ClientAndIP(ch chan<- *proxy) {
	wg1 := sync.WaitGroup{}
	ctx, cancel := context.WithCancel(context.Background())
	once := sync.Once{}

	for i := 0; i < 5; i++ {
		wg1.Add(1)
		time.Sleep(100 * time.Millisecond)

		go func() {
			defer wg1.Done()
			cl := getClient(prx.url)
			ip := proxyIP(ctx, cl)

			if len(ip) != 0 && !usedIP[ip] {
				once.Do(func() {
					cancel()
					prx.client = cl
					prx.ip = ip
					ch <- prx
				})
			}

		}()
	}
	wg1.Wait()
	//time.Sleep(15 * time.Second)
	cancel()
	fmt.Println(prx.name, prx.ip)
}

//func addProxies(c chan<- *http.Client, num int) {
//	defer timeTrack(time.Now(), "main")
//	for num > 0 {
//		go func() {
//			c <- newClient()
//		}()
//		//c <- newClient()
//		num--
//	}
//}

//func newClient() *http.Client {
//	var ip string
//	var cl *http.Client
//	for i := 0; i < 10; i++ {
//		prx := stats.Proxy()
//		cl = getClient(prx)
//		ip = proxyIP(cl)
//		if usedIP[ip] {
//			continue
//		} else if len(ip) > 0 && cl != nil {
//			break
//		}
//
//	}
//
//	if cl != nil {
//		usedIP[ip] = true
//		return cl
//	}
//	return nil
//}
